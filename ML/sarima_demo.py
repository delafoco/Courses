import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import streamlit as st

# Configuration de la page Streamlit
st.set_page_config(
    page_title="D√©mo SARIMA Simple",
    page_icon="üìà",
    layout="wide"
)

# Titre et description
st.title("üìà D√©monstration Simple de SARIMA")
st.markdown("""
Cette application montre comment utiliser le mod√®le SARIMA (Seasonal ARIMA) pour la pr√©diction de s√©ries temporelles.
Nous allons g√©n√©rer des donn√©es synth√©tiques et faire des pr√©dictions.
""")

def generate_synthetic_data(n_samples=1000):
    """G√©n√®re des donn√©es synth√©tiques avec une tendance et une saisonnalit√©"""
    t = np.linspace(0, 4*np.pi, n_samples)
    trend = 0.1 * t
    seasonal = np.sin(t) + 0.5 * np.sin(2*t)
    noise = np.random.normal(0, 0.1, n_samples)
    return trend + seasonal + noise

def train_sarima_model(data, order=(1,1,1), seasonal_order=(1,1,1,12)):
    """Entra√Æne un mod√®le SARIMA"""
    model = SARIMAX(data,
                    order=order,
                    seasonal_order=seasonal_order,
                    enforce_stationarity=False,
                    enforce_invertibility=False)
    results = model.fit(disp=False)
    return results

def plot_predictions(actual, predicted, title):
    """Affiche les pr√©dictions et les valeurs r√©elles"""
    plt.figure(figsize=(12, 6))
    plt.plot(actual, label='Donn√©es r√©elles', color='blue')
    plt.plot(predicted, label='Pr√©dictions', color='red', linestyle='--')
    plt.title(title)
    plt.legend()
    return plt.gcf()

def main():
    # G√©n√©ration des donn√©es
    st.subheader("1. G√©n√©ration des donn√©es synth√©tiques")
    n_samples = st.slider("Nombre d'√©chantillons", 100, 2000, 1000)
    data = generate_synthetic_data(n_samples)
    
    # Affichage des donn√©es
    fig = plt.figure(figsize=(12, 6))
    plt.plot(data)
    plt.title("Donn√©es synth√©tiques g√©n√©r√©es")
    st.pyplot(fig)
    
    # Param√®tres du mod√®le SARIMA
    st.subheader("2. Configuration du mod√®le SARIMA")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("Ordre du mod√®le")
        p = st.slider("p (AR)", 0, 3, 1)
        d = st.slider("d (Diff√©renciation)", 0, 2, 1)
        q = st.slider("q (MA)", 0, 3, 1)
    
    with col2:
        st.write("Ordre saisonnier")
        P = st.slider("P (AR saisonnier)", 0, 2, 1)
        D = st.slider("D (Diff√©renciation saisonni√®re)", 0, 2, 1)
        Q = st.slider("Q (MA saisonnier)", 0, 2, 1)
        s = st.slider("P√©riode saisonni√®re", 4, 24, 12)
    
    # Division train/test
    train_size = int(len(data) * 0.8)
    train_data = data[:train_size]
    test_data = data[train_size:]
    
    # Entra√Ænement du mod√®le
    if st.button("Entra√Æner le mod√®le"):
        with st.spinner("Entra√Ænement en cours..."):
            model = train_sarima_model(train_data, 
                                     order=(p,d,q),
                                     seasonal_order=(P,D,Q,s))
            
            # Pr√©dictions
            forecast = model.forecast(steps=len(test_data))
            
            # Calcul de l'erreur
            mse = mean_squared_error(test_data, forecast)
            rmse = np.sqrt(mse)
            
            st.write(f"Erreur quadratique moyenne (RMSE): {rmse:.4f}")
            
            # Affichage des pr√©dictions
            fig = plot_predictions(test_data, forecast, 
                                 "Comparaison des pr√©dictions avec les donn√©es r√©elles")
            st.pyplot(fig)
            
            # Affichage des diagnostics du mod√®le
            st.subheader("Diagnostics du mod√®le")
            fig = model.plot_diagnostics(figsize=(12, 8))
            st.pyplot(fig)

if __name__ == "__main__":
    main() 